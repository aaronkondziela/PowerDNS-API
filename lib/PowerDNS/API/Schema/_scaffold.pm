#
# *** DO NOT EDIT THIS FILE ***
# Generated on Wed Jan  5 23:15:18 2011 UTC, by
#   PowerDNS::API::Schema::Scaffold (undef)
#   MooseX::DBIC::Scaffold (0)
#   Moose::Object (1.21)
#

package PowerDNS::API::Schema::_dbic;
use base qw(DBIx::Class::Schema);

package PowerDNS::API::Schema::_scaffold;
use Moose::Role;
requires 'connect_args';

has 'dbic' => (
    is      => 'ro',
    isa     => 'PowerDNS::API::Schema::_dbic',
    lazy    => 1,
    default => sub {
        my $self = shift;
        PowerDNS::API::Schema::_dbic->connect( $self->connect_args );
    },
);

##
## Table: domains
##

has 'domain' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'PowerDNS::API::Schema::ResultSet::Domain',
    default => sub { shift->dbic->resultset('domain'); },
);

{

    package PowerDNS::API::Schema::Domain;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ PK::Auto Core /);

    no Moose;

    __PACKAGE__->table('domains');
    __PACKAGE__->add_columns(
        id => {
            data_type         => 'INT',
            default_value     => undef,
            is_auto_increment => 1,
            is_nullable       => 0,
            size              => 11
        },
        name => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 0,
            size          => 255
        },
        master => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 128
        },
        last_check => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 1,
            size          => 11
        },
        type => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 0,
            size          => 6
        },
        notified_serial => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 1,
            size          => 11
        },
        account => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 40
        },
    );
    __PACKAGE__->set_primary_key(qw/ id /);
    __PACKAGE__->add_unique_constraint( name_index => [qw/ name /] );
    __PACKAGE__->has_many(
        records => 'PowerDNS::API::Schema::Record',
        { 'foreign.domain_id' => 'self.id' }
    );
    {

        package PowerDNS::API::Schema::ResultSet::Domain;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        no Moose;
    }
    __PACKAGE__->resultset_class('PowerDNS::API::Schema::ResultSet::Domain');
    PowerDNS::API::Schema::_dbic->register_class( domain => __PACKAGE__ );
}

##
## Table: records
##

has 'record' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'PowerDNS::API::Schema::ResultSet::Record',
    default => sub { shift->dbic->resultset('record'); },
);

{

    package PowerDNS::API::Schema::Record;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ PK::Auto Core /);

    no Moose;

    __PACKAGE__->table('records');
    __PACKAGE__->add_columns(
        id => {
            data_type         => 'INT',
            default_value     => undef,
            is_auto_increment => 1,
            is_nullable       => 0,
            size              => 11
        },
        domain_id => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 1,
            size          => 11
        },
        name => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 255
        },
        type => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 6
        },
        content => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 255
        },
        ttl => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 1,
            size          => 11
        },
        prio => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 1,
            size          => 11
        },
        change_date => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 1,
            size          => 11
        },
    );
    __PACKAGE__->set_primary_key(qw/ id /);
    __PACKAGE__->belongs_to(
        domain => 'PowerDNS::API::Schema::Domain',
        { 'foreign.id' => 'self.domain_id' },
        { join_type    => 'left' }
    );
    {

        package PowerDNS::API::Schema::ResultSet::Record;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        no Moose;
    }
    __PACKAGE__->resultset_class('PowerDNS::API::Schema::ResultSet::Record');
    PowerDNS::API::Schema::_dbic->register_class( record => __PACKAGE__ );
}

##
## Table: supermasters
##

has 'supermaster' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'PowerDNS::API::Schema::ResultSet::Supermaster',
    default => sub { shift->dbic->resultset('supermaster'); },
);

{

    package PowerDNS::API::Schema::Supermaster;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ Core /);

    no Moose;

    __PACKAGE__->table('supermasters');
    __PACKAGE__->add_columns(
        ip => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 0,
            size          => 25
        },
        nameserver => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 0,
            size          => 255
        },
        account => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 40
        },
    );
    {

        package PowerDNS::API::Schema::ResultSet::Supermaster;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        no Moose;
    }
    __PACKAGE__->resultset_class('PowerDNS::API::Schema::ResultSet::Supermaster');
    PowerDNS::API::Schema::_dbic->register_class( supermaster => __PACKAGE__ );
}

1;
