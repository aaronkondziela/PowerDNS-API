#
# *** DO NOT EDIT THIS FILE ***
# Generated on Mon Apr 23 20:04:43 2012 UTC, by
#   PowerDNS::API::Schema::Scaffold (undef)
#   Mesoderm (0.121080)
#   Moose::Object (2.0403)
#

package PowerDNS::API::Schema::_mesoderm;
use Moose::Role;
sub schema { shift->result_source->schema->{__mesoderm} }

package PowerDNS::API::Schema::_dbic;
use base qw(DBIx::Class::Schema);

package PowerDNS::API::Schema::_scaffold;
use Moose::Role;
require Scalar::Util;
requires 'connect_args';

has 'dbic' => (
    is      => 'ro',
    isa     => 'PowerDNS::API::Schema::_dbic',
    lazy    => 1,
    default => sub {
        my $self = shift;
        my $dbic = PowerDNS::API::Schema::_dbic->connect( $self->connect_args );
        Scalar::Util::weaken( $dbic->{__mesoderm} = $self );
        return $dbic;
    },
);

##
## Table: accounts
##

has 'account' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'PowerDNS::API::Schema::ResultSet::Account',
    default => sub { shift->dbic->resultset('account'); },
);

{

    package PowerDNS::API::Schema::Account;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ Helper::Row::ToJSON Core /);

    with 'PowerDNS::API::Schema::Role::Account';
    with 'PowerDNS::API::Schema::_mesoderm';
    no Moose;

    __PACKAGE__->table('accounts');
    __PACKAGE__->add_columns(
        name => {
            data_type     => 'VARCHAR',
            default_value => undef,
            extra         => { 'character set' => 'latin1' },
            is_nullable   => 0,
            size          => 40
        },
        password => {
            data_type       => 'VARCHAR',
            default_value   => undef,
            is_nullable     => 1,
            is_serializable => 0,
            size            => 60
        },
        api_key => {
            data_type       => 'VARCHAR',
            default_value   => undef,
            is_nullable     => 1,
            is_serializable => 0,
            size            => 32
        },
        api_secret => {
            data_type       => 'VARCHAR',
            default_value   => undef,
            is_nullable     => 1,
            is_serializable => 0,
            size            => 32
        },
    );
    __PACKAGE__->set_primary_key(qw/ name /);
    __PACKAGE__->add_unique_constraint( api_key => [qw/ api_key /] );
    __PACKAGE__->add_unique_constraint( name    => [qw/ name /] );
    __PACKAGE__->has_many(
        domains => 'PowerDNS::API::Schema::Domain',
        { 'foreign.account' => 'self.name' }
    );
    __PACKAGE__->has_many(
        supermasters => 'PowerDNS::API::Schema::Supermaster',
        { 'foreign.account' => 'self.name' }
    );
    __PACKAGE__->many_to_many( 'records' => qw[ domains records ] );
    {

        package PowerDNS::API::Schema::ResultSet::Account;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        with 'PowerDNS::API::Schema::_mesoderm';
        no Moose;
    }
    __PACKAGE__->resultset_class('PowerDNS::API::Schema::ResultSet::Account');
    PowerDNS::API::Schema::_dbic->register_class( account => __PACKAGE__ );
}

##
## Table: cryptokeys
##

has 'cryptokey' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'PowerDNS::API::Schema::ResultSet::Cryptokey',
    default => sub { shift->dbic->resultset('cryptokey'); },
);

{

    package PowerDNS::API::Schema::Cryptokey;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ Helper::Row::ToJSON PK::Auto Core /);

    with 'PowerDNS::API::Schema::_mesoderm';
    no Moose;

    __PACKAGE__->table('cryptokeys');
    __PACKAGE__->add_columns(
        id => {
            data_type         => 'INT',
            default_value     => undef,
            is_auto_increment => 1,
            is_nullable       => 0,
            size              => 11
        },
        domain_id => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 0,
            size          => 11
        },
        flags => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 0,
            size          => 11
        },
        active => {
            data_type     => 'TINYINT',
            default_value => undef,
            is_nullable   => 1,
            size          => 1
        },
        content => {
            data_type     => 'TEXT',
            default_value => undef,
            extra         => { 'character set' => 'latin1' },
            is_nullable   => 1,
            size          => 65535
        },
    );
    __PACKAGE__->set_primary_key(qw/ id /);
    {

        package PowerDNS::API::Schema::ResultSet::Cryptokey;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        with 'PowerDNS::API::Schema::_mesoderm';
        no Moose;
    }
    __PACKAGE__->resultset_class('PowerDNS::API::Schema::ResultSet::Cryptokey');
    PowerDNS::API::Schema::_dbic->register_class( cryptokey => __PACKAGE__ );
}

##
## Table: domainmetadata
##

has 'domainmetadata' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'PowerDNS::API::Schema::ResultSet::Domainmetadata',
    default => sub { shift->dbic->resultset('domainmetadata'); },
);

{

    package PowerDNS::API::Schema::Domainmetadata;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ Helper::Row::ToJSON PK::Auto Core /);

    with 'PowerDNS::API::Schema::_mesoderm';
    no Moose;

    __PACKAGE__->table('domainmetadata');
    __PACKAGE__->add_columns(
        id => {
            data_type         => 'INT',
            default_value     => undef,
            is_auto_increment => 1,
            is_nullable       => 0,
            size              => 11
        },
        domain_id => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 0,
            size          => 11
        },
        kind => {
            data_type     => 'VARCHAR',
            default_value => undef,
            extra         => { 'character set' => 'latin1' },
            is_nullable   => 1,
            size          => 16
        },
        content => {
            data_type     => 'TEXT',
            default_value => undef,
            extra         => { 'character set' => 'latin1' },
            is_nullable   => 1,
            size          => 65535
        },
    );
    __PACKAGE__->set_primary_key(qw/ id /);
    {

        package PowerDNS::API::Schema::ResultSet::Domainmetadata;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        with 'PowerDNS::API::Schema::_mesoderm';
        no Moose;
    }
    __PACKAGE__->resultset_class('PowerDNS::API::Schema::ResultSet::Domainmetadata');
    PowerDNS::API::Schema::_dbic->register_class( domainmetadata => __PACKAGE__ );
}

##
## Table: domains
##

has 'domain' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'PowerDNS::API::Schema::ResultSet::Domain',
    default => sub { shift->dbic->resultset('domain'); },
);

{

    package PowerDNS::API::Schema::Domain;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ Helper::Row::ToJSON PK::Auto Core /);

    with 'PowerDNS::API::Schema::Role::Domain';
    with 'PowerDNS::API::Schema::_mesoderm';
    no Moose;

    __PACKAGE__->table('domains');
    __PACKAGE__->add_columns(
        id => {
            data_type         => 'INT',
            default_value     => undef,
            is_auto_increment => 1,
            is_nullable       => 0,
            size              => 11
        },
        name => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 0,
            size          => 255
        },
        master => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 128
        },
        last_check => {
            data_type       => 'INT',
            default_value   => undef,
            is_nullable     => 1,
            is_serializable => 0,
            size            => 11
        },
        type => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 0,
            size          => 6
        },
        notified_serial => {
            data_type       => 'INT',
            default_value   => undef,
            is_nullable     => 1,
            is_serializable => 0,
            size            => 11
        },
        account => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 40
        },
        cas => {
            accessor      => '_cas',
            data_type     => 'VARCHAR',
            default_value => '',
            is_nullable   => 0,
            size          => 10
        },
    );
    __PACKAGE__->set_primary_key(qw/ id /);
    __PACKAGE__->add_unique_constraint( name_index => [qw/ name /] );
    __PACKAGE__->belongs_to(
        account => 'PowerDNS::API::Schema::Account',
        { 'foreign.name' => 'self.account' },
        { join_type      => 'left' }
    );
    __PACKAGE__->has_many(
        records => 'PowerDNS::API::Schema::Record',
        { 'foreign.domain_id' => 'self.id' }
    );
    __PACKAGE__->many_to_many( 'supermasters' => qw[ account supermasters ] );
    {

        package PowerDNS::API::Schema::ResultSet::Domain;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        with 'PowerDNS::API::Schema::_mesoderm';
        no Moose;
    }
    __PACKAGE__->resultset_class('PowerDNS::API::Schema::ResultSet::Domain');
    PowerDNS::API::Schema::_dbic->register_class( domain => __PACKAGE__ );
}

##
## Table: records
##

has 'record' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'PowerDNS::API::Schema::ResultSet::Record',
    default => sub { shift->dbic->resultset('record'); },
);

{

    package PowerDNS::API::Schema::Record;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ Helper::Row::ToJSON PK::Auto Core /);

    with 'PowerDNS::API::Schema::Role::Record';
    with 'PowerDNS::API::Schema::_mesoderm';
    no Moose;

    __PACKAGE__->table('records');
    __PACKAGE__->add_columns(
        id => {
            data_type         => 'INT',
            default_value     => undef,
            is_auto_increment => 1,
            is_nullable       => 0,
            size              => 11
        },
        domain_id => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 1,
            size          => 11
        },
        name => {
            data_type     => 'VARCHAR',
            default_value => undef,
            extra         => { 'character set' => 'latin1' },
            is_nullable   => 1,
            size          => 255
        },
        type => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 10
        },
        content => {
            data_type     => 'VARCHAR',
            default_value => undef,
            extra         => { 'character set' => 'latin1' },
            is_nullable   => 1,
            size          => 255
        },
        ttl => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 1,
            size          => 11
        },
        prio => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 1,
            size          => 11
        },
        change_date => {
            data_type     => 'INT',
            default_value => undef,
            is_nullable   => 1,
            size          => 11
        },
        ordername => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 255
        },
        auth => {
            data_type     => 'TINYINT',
            default_value => undef,
            is_nullable   => 1,
            size          => 1
        },
    );
    __PACKAGE__->set_primary_key(qw/ id /);
    __PACKAGE__->belongs_to(
        domain => 'PowerDNS::API::Schema::Domain',
        { 'foreign.id' => 'self.domain_id' },
        { join_type    => 'left' }
    );
    __PACKAGE__->many_to_many( 'account' => qw[ domain account ] );
    {

        package PowerDNS::API::Schema::ResultSet::Record;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        with 'PowerDNS::API::Schema::_mesoderm';
        no Moose;
    }
    __PACKAGE__->resultset_class('PowerDNS::API::Schema::ResultSet::Record');
    PowerDNS::API::Schema::_dbic->register_class( record => __PACKAGE__ );
}

##
## Table: supermasters
##

has 'supermaster' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'PowerDNS::API::Schema::ResultSet::Supermaster',
    default => sub { shift->dbic->resultset('supermaster'); },
);

{

    package PowerDNS::API::Schema::Supermaster;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ Helper::Row::ToJSON Core /);

    with 'PowerDNS::API::Schema::_mesoderm';
    no Moose;

    __PACKAGE__->table('supermasters');
    __PACKAGE__->add_columns(
        ip => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 0,
            size          => 25
        },
        nameserver => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 0,
            size          => 255
        },
        account => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 40
        },
    );
    __PACKAGE__->set_primary_key(qw/ ip /);
    __PACKAGE__->belongs_to(
        account => 'PowerDNS::API::Schema::Account',
        { 'foreign.name' => 'self.account' },
        { join_type      => 'left' }
    );
    __PACKAGE__->many_to_many( 'domains' => qw[ account domains ] );
    {

        package PowerDNS::API::Schema::ResultSet::Supermaster;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        with 'PowerDNS::API::Schema::_mesoderm';
        no Moose;
    }
    __PACKAGE__->resultset_class('PowerDNS::API::Schema::ResultSet::Supermaster');
    PowerDNS::API::Schema::_dbic->register_class( supermaster => __PACKAGE__ );
}

##
## Table: tsigkeys
##

has 'tsigkey' => (
    is      => 'ro',
    lazy    => 1,
    isa     => 'PowerDNS::API::Schema::ResultSet::Tsigkey',
    default => sub { shift->dbic->resultset('tsigkey'); },
);

{

    package PowerDNS::API::Schema::Tsigkey;
    use Moose;
    extends 'DBIx::Class';

    __PACKAGE__->load_components(qw/ Helper::Row::ToJSON PK::Auto Core /);

    with 'PowerDNS::API::Schema::_mesoderm';
    no Moose;

    __PACKAGE__->table('tsigkeys');
    __PACKAGE__->add_columns(
        id => {
            data_type         => 'INT',
            default_value     => undef,
            is_auto_increment => 1,
            is_nullable       => 0,
            size              => 11
        },
        name => {
            data_type     => 'VARCHAR',
            default_value => undef,
            extra         => { 'character set' => 'latin1' },
            is_nullable   => 1,
            size          => 255
        },
        algorithm => {
            data_type     => 'VARCHAR',
            default_value => undef,
            is_nullable   => 1,
            size          => 50
        },
        secret => {
            data_type     => 'VARCHAR',
            default_value => undef,
            extra         => { 'character set' => 'latin1' },
            is_nullable   => 1,
            size          => 255
        },
    );
    __PACKAGE__->set_primary_key(qw/ id /);
    __PACKAGE__->add_unique_constraint( namealgoindex => [qw/ name algorithm /] );
    {

        package PowerDNS::API::Schema::ResultSet::Tsigkey;
        use Moose;
        extends 'DBIx::Class::ResultSet';
        with 'PowerDNS::API::Schema::_mesoderm';
        no Moose;
    }
    __PACKAGE__->resultset_class('PowerDNS::API::Schema::ResultSet::Tsigkey');
    PowerDNS::API::Schema::_dbic->register_class( tsigkey => __PACKAGE__ );
}

1;
